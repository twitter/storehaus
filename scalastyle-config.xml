<!--
  ~ Copyright 2016 Twitter Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may
  ~ not use this file except in compliance with the License. You may obtain
  ~ a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<scalastyle>
    <name>Scalastyle configuration</name>

    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.file.HeaderMatchesChecker" enabled="true">
        <parameters>
            <parameter name="regex">true</parameter>
            <parameter name="header"><![CDATA[/\*
 \* Copyright 20[0-9]{2} Twitter Inc.
 \*
 \* Licensed under the Apache License, Version 2.0 \(the "License"\); you may
 \* not use this file except in compliance with the License\. You may obtain
 \* a copy of the License at
 \*
 \*     http://www.apache.org/licenses/LICENSE-2.0
 \*
 \* Unless required by applicable law or agreed to in writing, software
 \* distributed under the License is distributed on an "AS IS" BASIS,
 \* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 \* See the License for the specific language governing permissions and
 \* limitations under the License\.
 \*/]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[100]]></parameter>
            <parameter name="tabSize"><![CDATA[2]]></parameter>
            <parameter name="ignoreImports">false</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker"
           enabled="true">
        <parameters><parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters><parameter name="maxParameters"><![CDATA[10]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker"
           enabled="true"/>

    <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>

    <check customId="nonascii" level="error"
           class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker"
           enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker"
           enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY,
                LARROW, RARROW</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker"
           enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR,
                MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NotImplementedErrorUsage"
           enabled="true"/>

    <check customId="println" level="error" class="org.scalastyle.scalariform.TokenChecker"
           enabled="true">
        <parameters><parameter name="regex">^println$</parameter></parameters>
        <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with
      // scalastyle:off println
      println(...)
      // scalastyle:on println]]></customMessage>
    </check>

    <check customId="javaconversions" level="error" class="org.scalastyle.scalariform.TokenChecker"
           enabled="true">
        <parameters><parameter name="regex">JavaConversions</parameter></parameters>
        <customMessage>Instead of importing implicits in scala.collection.JavaConversions._, import
            scala.collection.JavaConverters._ and use .asScala / .asJava methods</customMessage>
    </check>

    <check level="error" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker"
           enabled="true">
        <parameters>
            <parameter name="tokens">COMMA</parameter>
        </parameters>
    </check>

    <check customId="SingleSpaceBetweenRParenAndLCurlyBrace" level="error"
           class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters><parameter name="regex">\)\{</parameter></parameters>
        <customMessage><![CDATA[
      Single Space between ')' and `{`.
    ]]></customMessage>
    </check>

    <check customId="OmitBracesInCase" level="error" class="org.scalastyle.file.RegexChecker"
           enabled="true">
        <parameters><parameter name="regex">case[^\n>]*=>\s*\{</parameter></parameters>
        <customMessage>Omit braces in case clauses.</customMessage>
    </check>

    <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="false">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker"
           enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker"
           enabled="true">
        <parameters><parameter name="maxMethods"><![CDATA[30]]></parameter></parameters>
    </check>

</scalastyle>
